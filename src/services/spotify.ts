import {
  LOCAL_STORAGE_AUTH_CODE,
  LOCAL_STORAGE_ACCESS_CODE,
  LOCAL_STORAGE_ACCESS_CODE_EXPIRY,
} from '@/utils';

const spotifyHeaders = {
  'Content-Type': 'application/json',
  Authorization: `Bearer ${localStorage.getItem(LOCAL_STORAGE_ACCESS_CODE)}`,
};

export const fetchSpotifyUser = async () => {
  try {
    const response = await fetch('https://api.spotify.com/v1/me', {
      headers: spotifyHeaders,
    });
    return response.json() as Promise<SpotifyApi.UserObjectPrivate>;
  } catch (error) {
    console.error('error fetching user : ', error);
  }
};

export const fetchSpotifyCreatePlaylist = async (userId: string, playlistName: string) => {
  try {
    const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {
      method: 'POST',
      headers: spotifyHeaders,
      body: JSON.stringify({
        name: `Gemini AI : ${playlistName}`,
        description: 'Playlist generated by Gemini AI',
        public: false,
      }),
    });
    return response.json() as Promise<SpotifyApi.PlaylistObjectFull>;
  } catch (error) {
    console.error('error fetching playlist : ', error);
  }
};

export const fetchSpotifyAddItemsToPlaylist = async (
  playlistId: string,
  tracks: SpotifyApi.TrackObjectFull[]
) => {
  try {
    const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
      method: 'POST',
      headers: spotifyHeaders,
      body: JSON.stringify({
        position: 0,
        uris: tracks?.filter((t) => !!t && t.uri).map((t) => encodeURI(t.uri)),
      }),
    });
    return response.json() as Promise<SpotifyApi.PlaylistObjectFull>;
  } catch (error) {
    console.error('error fetching adding items to playlist : ', error);
  }
};
